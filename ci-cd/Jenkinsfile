pipeline {
  agent any
  environment {
    COMMIT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    DOCKER_REPOSITORY = "pelegov"
    BRANCH = "main"
    DOCKER_PATH = "ci-cd/flask"
    DEPLOYMENT_PATH = "ci-cd/deployment"
    IMAGE_NAME = "leumi"
  }
  stages {
    stage('Git pull') {
      steps {
        sh "git pull origin $BRANCH"
      }
    }
    stage('build & push & run') {
      steps {
        sh """
        cd $DOCKER_PATH
        docker build -t $DOCKER_REPOSITORY/$IMAGE_NAME:$COMMIT .
        docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$COMMIT
        docker run -d -p 5001:5000 $DOCKER_REPOSITORY/$IMAGE_NAME:$COMMIT
      """
      }
    }
    stage('test and stop') {
      steps {
        script {
          def response = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:5001', returnStdout: true).trim()
          if (response == '200') {
            echo 'Response is 200, stopping the container...'
            sh 'docker stop $(docker ps -q --filter "ancestor=$DOCKER_REPOSITORY/$IMAGE_NAME:$COMMIT")'
          } else {
            error ('Service did not return a 200 response')
          }
        }
      }
    }
    stage('Deploy to Minikube') {
      steps {
        sh """
        sed -i '' 's|REPLACE_IMAGE|$DOCKER_REPOSITORY/$IMAGE_NAME:$COMMIT|g' ci-cd/deployment/deployment.yaml
        kubectl apply -f ci-cd/deployment/deployment.yaml
        kubectl apply -f ci-cd/deployment/service.yaml
        """
      }
    }
  }
  post {  
    failure {  
      sh "echo Sending Failed Email!"
        emailext body: '${DEFAULT_CONTENT} - CI/CD Pipeline has been failed!',
        subject: '${DEFAULT_SUBJECT} - CI/CD pipeline failed!',
        mimeType: 'text/html',to: ''
    } 
  }
}
